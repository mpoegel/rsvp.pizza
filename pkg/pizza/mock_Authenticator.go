// Code generated by mockery v2.52.3. DO NOT EDIT.

package pizza

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthenticator is an autogenerated mock type for the Authenticator type
type MockAuthenticator struct {
	mock.Mock
}

type MockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticator) EXPECT() *MockAuthenticator_Expecter {
	return &MockAuthenticator_Expecter{mock: &_m.Mock}
}

// DecodeAccessToken provides a mock function with given fields: ctx, rawAccessToken
func (_m *MockAuthenticator) DecodeAccessToken(ctx context.Context, rawAccessToken string) (*AccessToken, error) {
	ret := _m.Called(ctx, rawAccessToken)

	if len(ret) == 0 {
		panic("no return value specified for DecodeAccessToken")
	}

	var r0 *AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*AccessToken, error)); ok {
		return rf(ctx, rawAccessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *AccessToken); ok {
		r0 = rf(ctx, rawAccessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rawAccessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_DecodeAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeAccessToken'
type MockAuthenticator_DecodeAccessToken_Call struct {
	*mock.Call
}

// DecodeAccessToken is a helper method to define mock.On call
//   - ctx context.Context
//   - rawAccessToken string
func (_e *MockAuthenticator_Expecter) DecodeAccessToken(ctx interface{}, rawAccessToken interface{}) *MockAuthenticator_DecodeAccessToken_Call {
	return &MockAuthenticator_DecodeAccessToken_Call{Call: _e.mock.On("DecodeAccessToken", ctx, rawAccessToken)}
}

func (_c *MockAuthenticator_DecodeAccessToken_Call) Run(run func(ctx context.Context, rawAccessToken string)) *MockAuthenticator_DecodeAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticator_DecodeAccessToken_Call) Return(_a0 *AccessToken, _a1 error) *MockAuthenticator_DecodeAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_DecodeAccessToken_Call) RunAndReturn(run func(context.Context, string) (*AccessToken, error)) *MockAuthenticator_DecodeAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ExchangeCodeForToken provides a mock function with given fields: ctx, code
func (_m *MockAuthenticator) ExchangeCodeForToken(ctx context.Context, code string) (*IDToken, error) {
	ret := _m.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForToken")
	}

	var r0 *IDToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*IDToken, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *IDToken); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_ExchangeCodeForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForToken'
type MockAuthenticator_ExchangeCodeForToken_Call struct {
	*mock.Call
}

// ExchangeCodeForToken is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *MockAuthenticator_Expecter) ExchangeCodeForToken(ctx interface{}, code interface{}) *MockAuthenticator_ExchangeCodeForToken_Call {
	return &MockAuthenticator_ExchangeCodeForToken_Call{Call: _e.mock.On("ExchangeCodeForToken", ctx, code)}
}

func (_c *MockAuthenticator_ExchangeCodeForToken_Call) Run(run func(ctx context.Context, code string)) *MockAuthenticator_ExchangeCodeForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticator_ExchangeCodeForToken_Call) Return(_a0 *IDToken, _a1 error) *MockAuthenticator_ExchangeCodeForToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_ExchangeCodeForToken_Call) RunAndReturn(run func(context.Context, string) (*IDToken, error)) *MockAuthenticator_ExchangeCodeForToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthCodeURL provides a mock function with given fields: ctx, state
func (_m *MockAuthenticator) GetAuthCodeURL(ctx context.Context, state string) string {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthCodeURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAuthenticator_GetAuthCodeURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthCodeURL'
type MockAuthenticator_GetAuthCodeURL_Call struct {
	*mock.Call
}

// GetAuthCodeURL is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
func (_e *MockAuthenticator_Expecter) GetAuthCodeURL(ctx interface{}, state interface{}) *MockAuthenticator_GetAuthCodeURL_Call {
	return &MockAuthenticator_GetAuthCodeURL_Call{Call: _e.mock.On("GetAuthCodeURL", ctx, state)}
}

func (_c *MockAuthenticator_GetAuthCodeURL_Call) Run(run func(ctx context.Context, state string)) *MockAuthenticator_GetAuthCodeURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticator_GetAuthCodeURL_Call) Return(_a0 string) *MockAuthenticator_GetAuthCodeURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenticator_GetAuthCodeURL_Call) RunAndReturn(run func(context.Context, string) string) *MockAuthenticator_GetAuthCodeURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthURL provides a mock function with no fields
func (_m *MockAuthenticator) GetAuthURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAuthenticator_GetAuthURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthURL'
type MockAuthenticator_GetAuthURL_Call struct {
	*mock.Call
}

// GetAuthURL is a helper method to define mock.On call
func (_e *MockAuthenticator_Expecter) GetAuthURL() *MockAuthenticator_GetAuthURL_Call {
	return &MockAuthenticator_GetAuthURL_Call{Call: _e.mock.On("GetAuthURL")}
}

func (_c *MockAuthenticator_GetAuthURL_Call) Run(run func()) *MockAuthenticator_GetAuthURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthenticator_GetAuthURL_Call) Return(_a0 string) *MockAuthenticator_GetAuthURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthenticator_GetAuthURL_Call) RunAndReturn(run func() string) *MockAuthenticator_GetAuthURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields: ctx, opt
func (_m *MockAuthenticator) GetToken(ctx context.Context, opt AuthTokenOptions) (*JWT, error) {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, AuthTokenOptions) (*JWT, error)); ok {
		return rf(ctx, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, AuthTokenOptions) *JWT); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*JWT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, AuthTokenOptions) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type MockAuthenticator_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - opt AuthTokenOptions
func (_e *MockAuthenticator_Expecter) GetToken(ctx interface{}, opt interface{}) *MockAuthenticator_GetToken_Call {
	return &MockAuthenticator_GetToken_Call{Call: _e.mock.On("GetToken", ctx, opt)}
}

func (_c *MockAuthenticator_GetToken_Call) Run(run func(ctx context.Context, opt AuthTokenOptions)) *MockAuthenticator_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AuthTokenOptions))
	})
	return _c
}

func (_c *MockAuthenticator_GetToken_Call) Return(_a0 *JWT, _a1 error) *MockAuthenticator_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_GetToken_Call) RunAndReturn(run func(context.Context, AuthTokenOptions) (*JWT, error)) *MockAuthenticator_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: ctx, rawToken
func (_m *MockAuthenticator) VerifyToken(ctx context.Context, rawToken string) (*IDToken, error) {
	ret := _m.Called(ctx, rawToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *IDToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*IDToken, error)); ok {
		return rf(ctx, rawToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *IDToken); ok {
		r0 = rf(ctx, rawToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, rawToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticator_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockAuthenticator_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - ctx context.Context
//   - rawToken string
func (_e *MockAuthenticator_Expecter) VerifyToken(ctx interface{}, rawToken interface{}) *MockAuthenticator_VerifyToken_Call {
	return &MockAuthenticator_VerifyToken_Call{Call: _e.mock.On("VerifyToken", ctx, rawToken)}
}

func (_c *MockAuthenticator_VerifyToken_Call) Run(run func(ctx context.Context, rawToken string)) *MockAuthenticator_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticator_VerifyToken_Call) Return(_a0 *IDToken, _a1 error) *MockAuthenticator_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticator_VerifyToken_Call) RunAndReturn(run func(context.Context, string) (*IDToken, error)) *MockAuthenticator_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthenticator creates a new instance of MockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthenticator {
	mock := &MockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
