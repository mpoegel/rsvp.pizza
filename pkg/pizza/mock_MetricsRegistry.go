// Code generated by mockery v2.52.3. DO NOT EDIT.

package pizza

import mock "github.com/stretchr/testify/mock"

// MockMetricsRegistry is an autogenerated mock type for the MetricsRegistry type
type MockMetricsRegistry struct {
	mock.Mock
}

type MockMetricsRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsRegistry) EXPECT() *MockMetricsRegistry_Expecter {
	return &MockMetricsRegistry_Expecter{mock: &_m.Mock}
}

// NewCounterMetric provides a mock function with given fields: name, labels
func (_m *MockMetricsRegistry) NewCounterMetric(name string, labels map[string]string) CounterMetric {
	ret := _m.Called(name, labels)

	if len(ret) == 0 {
		panic("no return value specified for NewCounterMetric")
	}

	var r0 CounterMetric
	if rf, ok := ret.Get(0).(func(string, map[string]string) CounterMetric); ok {
		r0 = rf(name, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(CounterMetric)
		}
	}

	return r0
}

// MockMetricsRegistry_NewCounterMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCounterMetric'
type MockMetricsRegistry_NewCounterMetric_Call struct {
	*mock.Call
}

// NewCounterMetric is a helper method to define mock.On call
//   - name string
//   - labels map[string]string
func (_e *MockMetricsRegistry_Expecter) NewCounterMetric(name interface{}, labels interface{}) *MockMetricsRegistry_NewCounterMetric_Call {
	return &MockMetricsRegistry_NewCounterMetric_Call{Call: _e.mock.On("NewCounterMetric", name, labels)}
}

func (_c *MockMetricsRegistry_NewCounterMetric_Call) Run(run func(name string, labels map[string]string)) *MockMetricsRegistry_NewCounterMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsRegistry_NewCounterMetric_Call) Return(_a0 CounterMetric) *MockMetricsRegistry_NewCounterMetric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsRegistry_NewCounterMetric_Call) RunAndReturn(run func(string, map[string]string) CounterMetric) *MockMetricsRegistry_NewCounterMetric_Call {
	_c.Call.Return(run)
	return _c
}

// NewGaugeMetric provides a mock function with given fields: name, labels
func (_m *MockMetricsRegistry) NewGaugeMetric(name string, labels map[string]string) GaugeMetric {
	ret := _m.Called(name, labels)

	if len(ret) == 0 {
		panic("no return value specified for NewGaugeMetric")
	}

	var r0 GaugeMetric
	if rf, ok := ret.Get(0).(func(string, map[string]string) GaugeMetric); ok {
		r0 = rf(name, labels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GaugeMetric)
		}
	}

	return r0
}

// MockMetricsRegistry_NewGaugeMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewGaugeMetric'
type MockMetricsRegistry_NewGaugeMetric_Call struct {
	*mock.Call
}

// NewGaugeMetric is a helper method to define mock.On call
//   - name string
//   - labels map[string]string
func (_e *MockMetricsRegistry_Expecter) NewGaugeMetric(name interface{}, labels interface{}) *MockMetricsRegistry_NewGaugeMetric_Call {
	return &MockMetricsRegistry_NewGaugeMetric_Call{Call: _e.mock.On("NewGaugeMetric", name, labels)}
}

func (_c *MockMetricsRegistry_NewGaugeMetric_Call) Run(run func(name string, labels map[string]string)) *MockMetricsRegistry_NewGaugeMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockMetricsRegistry_NewGaugeMetric_Call) Return(_a0 GaugeMetric) *MockMetricsRegistry_NewGaugeMetric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsRegistry_NewGaugeMetric_Call) RunAndReturn(run func(string, map[string]string) GaugeMetric) *MockMetricsRegistry_NewGaugeMetric_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricsRegistry creates a new instance of MockMetricsRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsRegistry {
	mock := &MockMetricsRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
