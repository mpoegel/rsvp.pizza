// Code generated by mockery v2.52.3. DO NOT EDIT.

package pizza

import mock "github.com/stretchr/testify/mock"

// MockCounterMetric is an autogenerated mock type for the CounterMetric type
type MockCounterMetric struct {
	mock.Mock
}

type MockCounterMetric_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounterMetric) EXPECT() *MockCounterMetric_Expecter {
	return &MockCounterMetric_Expecter{mock: &_m.Mock}
}

// Increment provides a mock function with no fields
func (_m *MockCounterMetric) Increment() {
	_m.Called()
}

// MockCounterMetric_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type MockCounterMetric_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
func (_e *MockCounterMetric_Expecter) Increment() *MockCounterMetric_Increment_Call {
	return &MockCounterMetric_Increment_Call{Call: _e.mock.On("Increment")}
}

func (_c *MockCounterMetric_Increment_Call) Run(run func()) *MockCounterMetric_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCounterMetric_Increment_Call) Return() *MockCounterMetric_Increment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCounterMetric_Increment_Call) RunAndReturn(run func()) *MockCounterMetric_Increment_Call {
	_c.Run(run)
	return _c
}

// NewMockCounterMetric creates a new instance of MockCounterMetric. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounterMetric(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounterMetric {
	mock := &MockCounterMetric{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
