// Code generated by mockery v2.52.3. DO NOT EDIT.

package pizza

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockCalendar is an autogenerated mock type for the Calendar type
type MockCalendar struct {
	mock.Mock
}

type MockCalendar_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCalendar) EXPECT() *MockCalendar_Expecter {
	return &MockCalendar_Expecter{mock: &_m.Mock}
}

// ActivateEvent provides a mock function with given fields: eventID
func (_m *MockCalendar) ActivateEvent(eventID string) error {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for ActivateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCalendar_ActivateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateEvent'
type MockCalendar_ActivateEvent_Call struct {
	*mock.Call
}

// ActivateEvent is a helper method to define mock.On call
//   - eventID string
func (_e *MockCalendar_Expecter) ActivateEvent(eventID interface{}) *MockCalendar_ActivateEvent_Call {
	return &MockCalendar_ActivateEvent_Call{Call: _e.mock.On("ActivateEvent", eventID)}
}

func (_c *MockCalendar_ActivateEvent_Call) Run(run func(eventID string)) *MockCalendar_ActivateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCalendar_ActivateEvent_Call) Return(_a0 error) *MockCalendar_ActivateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalendar_ActivateEvent_Call) RunAndReturn(run func(string) error) *MockCalendar_ActivateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CancelEvent provides a mock function with given fields: eventID
func (_m *MockCalendar) CancelEvent(eventID string) error {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for CancelEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCalendar_CancelEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelEvent'
type MockCalendar_CancelEvent_Call struct {
	*mock.Call
}

// CancelEvent is a helper method to define mock.On call
//   - eventID string
func (_e *MockCalendar_Expecter) CancelEvent(eventID interface{}) *MockCalendar_CancelEvent_Call {
	return &MockCalendar_CancelEvent_Call{Call: _e.mock.On("CancelEvent", eventID)}
}

func (_c *MockCalendar_CancelEvent_Call) Run(run func(eventID string)) *MockCalendar_CancelEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCalendar_CancelEvent_Call) Return(_a0 error) *MockCalendar_CancelEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalendar_CancelEvent_Call) RunAndReturn(run func(string) error) *MockCalendar_CancelEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEvent provides a mock function with given fields: _a0
func (_m *MockCalendar) CreateEvent(_a0 CalendarEvent) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(CalendarEvent) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCalendar_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockCalendar_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - _a0 CalendarEvent
func (_e *MockCalendar_Expecter) CreateEvent(_a0 interface{}) *MockCalendar_CreateEvent_Call {
	return &MockCalendar_CreateEvent_Call{Call: _e.mock.On("CreateEvent", _a0)}
}

func (_c *MockCalendar_CreateEvent_Call) Run(run func(_a0 CalendarEvent)) *MockCalendar_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(CalendarEvent))
	})
	return _c
}

func (_c *MockCalendar_CreateEvent_Call) Return(_a0 error) *MockCalendar_CreateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalendar_CreateEvent_Call) RunAndReturn(run func(CalendarEvent) error) *MockCalendar_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvent provides a mock function with given fields: eventID
func (_m *MockCalendar) GetEvent(eventID string) (CalendarEvent, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 CalendarEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (CalendarEvent, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(string) CalendarEvent); ok {
		r0 = rf(eventID)
	} else {
		r0 = ret.Get(0).(CalendarEvent)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCalendar_GetEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvent'
type MockCalendar_GetEvent_Call struct {
	*mock.Call
}

// GetEvent is a helper method to define mock.On call
//   - eventID string
func (_e *MockCalendar_Expecter) GetEvent(eventID interface{}) *MockCalendar_GetEvent_Call {
	return &MockCalendar_GetEvent_Call{Call: _e.mock.On("GetEvent", eventID)}
}

func (_c *MockCalendar_GetEvent_Call) Run(run func(eventID string)) *MockCalendar_GetEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCalendar_GetEvent_Call) Return(_a0 CalendarEvent, _a1 error) *MockCalendar_GetEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCalendar_GetEvent_Call) RunAndReturn(run func(string) (CalendarEvent, error)) *MockCalendar_GetEvent_Call {
	_c.Call.Return(run)
	return _c
}

// InviteToEvent provides a mock function with given fields: eventID, email, name
func (_m *MockCalendar) InviteToEvent(eventID string, email string, name string) error {
	ret := _m.Called(eventID, email, name)

	if len(ret) == 0 {
		panic("no return value specified for InviteToEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(eventID, email, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCalendar_InviteToEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InviteToEvent'
type MockCalendar_InviteToEvent_Call struct {
	*mock.Call
}

// InviteToEvent is a helper method to define mock.On call
//   - eventID string
//   - email string
//   - name string
func (_e *MockCalendar_Expecter) InviteToEvent(eventID interface{}, email interface{}, name interface{}) *MockCalendar_InviteToEvent_Call {
	return &MockCalendar_InviteToEvent_Call{Call: _e.mock.On("InviteToEvent", eventID, email, name)}
}

func (_c *MockCalendar_InviteToEvent_Call) Run(run func(eventID string, email string, name string)) *MockCalendar_InviteToEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockCalendar_InviteToEvent_Call) Return(_a0 error) *MockCalendar_InviteToEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalendar_InviteToEvent_Call) RunAndReturn(run func(string, string, string) error) *MockCalendar_InviteToEvent_Call {
	_c.Call.Return(run)
	return _c
}

// ListEvents provides a mock function with given fields: numEvents
func (_m *MockCalendar) ListEvents(numEvents int) ([]CalendarEvent, error) {
	ret := _m.Called(numEvents)

	if len(ret) == 0 {
		panic("no return value specified for ListEvents")
	}

	var r0 []CalendarEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]CalendarEvent, error)); ok {
		return rf(numEvents)
	}
	if rf, ok := ret.Get(0).(func(int) []CalendarEvent); ok {
		r0 = rf(numEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]CalendarEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(numEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCalendar_ListEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEvents'
type MockCalendar_ListEvents_Call struct {
	*mock.Call
}

// ListEvents is a helper method to define mock.On call
//   - numEvents int
func (_e *MockCalendar_Expecter) ListEvents(numEvents interface{}) *MockCalendar_ListEvents_Call {
	return &MockCalendar_ListEvents_Call{Call: _e.mock.On("ListEvents", numEvents)}
}

func (_c *MockCalendar_ListEvents_Call) Run(run func(numEvents int)) *MockCalendar_ListEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockCalendar_ListEvents_Call) Return(_a0 []CalendarEvent, _a1 error) *MockCalendar_ListEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCalendar_ListEvents_Call) RunAndReturn(run func(int) ([]CalendarEvent, error)) *MockCalendar_ListEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventsBetween provides a mock function with given fields: start, end, numEvents
func (_m *MockCalendar) ListEventsBetween(start time.Time, end time.Time, numEvents int) ([]CalendarEvent, error) {
	ret := _m.Called(start, end, numEvents)

	if len(ret) == 0 {
		panic("no return value specified for ListEventsBetween")
	}

	var r0 []CalendarEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int) ([]CalendarEvent, error)); ok {
		return rf(start, end, numEvents)
	}
	if rf, ok := ret.Get(0).(func(time.Time, time.Time, int) []CalendarEvent); ok {
		r0 = rf(start, end, numEvents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]CalendarEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time, time.Time, int) error); ok {
		r1 = rf(start, end, numEvents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCalendar_ListEventsBetween_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventsBetween'
type MockCalendar_ListEventsBetween_Call struct {
	*mock.Call
}

// ListEventsBetween is a helper method to define mock.On call
//   - start time.Time
//   - end time.Time
//   - numEvents int
func (_e *MockCalendar_Expecter) ListEventsBetween(start interface{}, end interface{}, numEvents interface{}) *MockCalendar_ListEventsBetween_Call {
	return &MockCalendar_ListEventsBetween_Call{Call: _e.mock.On("ListEventsBetween", start, end, numEvents)}
}

func (_c *MockCalendar_ListEventsBetween_Call) Run(run func(start time.Time, end time.Time, numEvents int)) *MockCalendar_ListEventsBetween_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time), args[1].(time.Time), args[2].(int))
	})
	return _c
}

func (_c *MockCalendar_ListEventsBetween_Call) Return(_a0 []CalendarEvent, _a1 error) *MockCalendar_ListEventsBetween_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCalendar_ListEventsBetween_Call) RunAndReturn(run func(time.Time, time.Time, int) ([]CalendarEvent, error)) *MockCalendar_ListEventsBetween_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCalendar creates a new instance of MockCalendar. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCalendar(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCalendar {
	mock := &MockCalendar{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
